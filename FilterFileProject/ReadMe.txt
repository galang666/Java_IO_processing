Task: 
Input 1: The company server log file, created on server, contains one day information about server activity [active IDs]. It has an IP address [column 1], timestamp [column 2], ID - a hexadecimal number [Column 3]. 

Sample Input 1 [TuesdayActiveID.log(serverLogFiles Directory), 1,000,000 entries generated by random class]:
#ID Generator We-Care.com server
#Date: 2013-02-07 22:20:30.892
#Fields: IP date time ID
108.46.4.219     2013-02-07 22:20:30.902     4A42487
108.46.4.219     2013-02-07 22:20:30.902     23F83D0
108.46.4.219     2013-02-07 22:20:30.902     53739D7
108.46.4.219     2013-02-07 22:20:30.902     F6A0D08
108.46.4.219     2013-02-07 22:20:30.902     EEB52EB
108.46.4.219     2013-02-07 22:20:30.902     102D25D
108.46.4.219     2013-02-07 22:20:30.902     1B40E5A
108.46.4.219     2013-02-07 22:20:30.902     A878E4A
108.46.4.219     2013-02-07 22:20:30.902     2C4CFC8
108.46.4.219     2013-02-07 22:20:30.902     E044939

Input 2: The clients/partners provide a group of text files with an ID that can be active and inactive that need to be filtered out. 

Sample Input 2 [Grp1.txt to Grp300.txt(partnerGroupFiles Directory) - contain 30,000 entries each generated by random functions]:
6DD17ED
A2452D8
1470974
7D9B001
B37D9E5
17C516E
07B47A0
F3D84A7
8867419
7D96F2A

Output: The clients/partners need to filter out the active IDs from the inactive IDs. The result as an output kof the matched active IDs is saved into an ActiveCountByGroup.txt file. The total running time of the filter is calculated.

Sample Output [ActiveCountByGroup.txt]:
Grp39.txt has 106 active hexadecimal ID matches!
Grp282.txt has 96 active hexadecimal ID matches!
Grp234.txt has 108 active hexadecimal ID matches!
Grp180.txt has 111 active hexadecimal ID matches!
Grp217.txt has 112 active hexadecimal ID matches!
Grp27.txt has 107 active hexadecimal ID matches!
Grp25.txt has 97 active hexadecimal ID matches!
Grp201.txt has 134 active hexadecimal ID matches!
Grp111.txt has 116 active hexadecimal ID matches!
Grp133.txt has 104 active hexadecimal ID matches!

The display of the java console after the execution:
vladimir@vladimir-Satellite-C655:~/Desktop/We-Care.ComFileProject$ sudo java JavaIOApp
The number of object Client Group files created: 300
There are 998254 unique active hexadecimal IDs in the set! Duplicates in the server log file: 1746
The program's running time is 38759 milliseconds!

Description of the program:
The Java Processing File Input/Output Filter Program [The program is testing 1,000,000 hexadecimal IDs in the server log file and compares it to the 300 group text files which contain 30,000 entries each]. For improved  search running time, the HashSet is used to store the hexadecimal ID strings. The program is calculating the total running time.






